<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>br.com.xys</groupId>
    <artifactId>dynaTest</artifactId>
    <version>1.0.0</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.3.RELEASE</version>
    </parent>


    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>1.5.1.RELEASE</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>




    </dependencies>

    <properties>
        <!-- Dynatrace Plugin global-scope properties -->
        <!--
            *** Change properties below according to your Dynatrace configuration ***

            dynaTrace.agentPath - used by test phase to inject Java agent into JVM (not used directly by plugin)
            dynaTrace.agentMapping - agent alias passed to Java agent (not used directly by plugin)
            dynaTrace.systemProfile - defines system profile name used by startTest, enableProfile, activateConfiguration, ... (it's plugin's property)

        -->
        <dynaTrace.agentPath>dynatrace-6.5/agent/lib64/libdtagent.so</dynaTrace.agentPath>
        <dynaTrace.agentMapping>Test-Agent_Jenkins-Test</dynaTrace.agentMapping>
        <dynaTrace.systemProfile>Jenkins-Test</dynaTrace.systemProfile> <!-- available as "profileName" in plugin (local) scope -->
        <!-- *** *** -->

        <!-- Properties used by every Dynatrace Maven goal -->
        <dynaTrace.username>admin</dynaTrace.username>
        <dynaTrace.password>admin</dynaTrace.password>
        <dynaTrace.serverUrl>https://172.19.0.3:8021</dynaTrace.serverUrl>
        <dynaTrace.ignoreSSLErrors>true</dynaTrace.ignoreSSLErrors> <!-- allows to use SSL without valid certificate -->

        <!-- Properties for goal: activateConfiguration -->
        <dynaTrace.configuration>Default</dynaTrace.configuration>

        <!-- Properties for goal: clearSession -->
        <!-- only takes the dynaTrace.systemProfile -->

        <!-- Properties for goal: enableProfile -->
        <dynaTrace.enable>true</dynaTrace.enable> <!-- true for enabling, false for disabling -->

        <!-- Properties for goal: getAgentInfo -->
        <!-- Note that getAgentInfo goal uses dynaTrace.infoForAgentByIndex only if dynaTrace.infoForAgentByName is not set or couldn't find agent by given name -->
        <dynaTrace.infoForAgentByIndex>0</dynaTrace.infoForAgentByIndex> <!-- index of the agent that information should be returned, e.g.: 0, 1, 2, ... -->
        <dynaTrace.infoForAgentByName>SomeAgentName</dynaTrace.infoForAgentByName> <!-- Name of the agent that information should be returned -->
        <dynaTrace.agentCountProperty>dynaTrace.agentCount</dynaTrace.agentCountProperty> <!-- Property that will be set with the number of agents based on the criteria passed by infoForAgentByXXX -->
        <dynaTrace.agentNameProperty>dynaTrace.agentName</dynaTrace.agentNameProperty> <!-- Property that will be set with the first agent name that matches the search criteria -->
        <dynaTrace.agentHostNameProperty>dynaTrace.agentHostName</dynaTrace.agentHostNameProperty> <!-- Property that will be set with the first agent host name that matches the search criteria -->
        <dynaTrace.agentProcessIdProperty>dynaTrace.agentProcessId</dynaTrace.agentProcessIdProperty> <!-- Property that will be set with the first processid that matches the search criteria -->

        <!-- Properties for Memory and Thread Dump goals: memoryDump, threadDump -->
        <!-- <dynaTrace.agentHostName>MYMACHINE</dynaTrace.hostName> --> <!-- will take this from the output of getAgentInfo -->
        <!-- <dynaTrace.agentName>GoSpaceFrontend</dynaTrace.agentName> --> <!-- will take this from the output of getAgentInfo -->
        <!-- <dynaTrace.agentProcessId>1234</dynaTrace.processId> --> <!-- will take this from the output of getAgentInfo -->
        <dynaTrace.sessionLocked>false</dynaTrace.sessionLocked>
        <dynaTrace.waitForDumpTimeout>60000</dynaTrace.waitForDumpTimeout> <!-- How long to wait for the dump in ms -->
        <dynaTrace.waitForDumpPollingInterval>5000</dynaTrace.waitForDumpPollingInterval> <!-- How often to poll for the status till we reach the timeout -->
        <dynaTrace.dumpStatusProperty>dynaTrace.status</dynaTrace.dumpStatusProperty> <!-- Property that will be set with the status. true when succeeded - false when we ran into the timeout -->

        <!-- Properties for Memory Dump goal only: memoryDump -->
        <dynaTrace.dumpType>memdump_simple</dynaTrace.dumpType> <!-- other options: memdump_extended|memdump_selective -->
        <dynaTrace.memoryDumpNameProperty>dynaTrace.dumpName</dynaTrace.memoryDumpNameProperty> <!-- Property that retrieves the memory dump name -->

        <!-- Properties for Thread Dump goal only: threadDump -->
        <dynaTrace.threadDumpNameProperty>dynaTrace.dumpName</dynaTrace.threadDumpNameProperty> <!-- Property that retrieves the thread dump name -->

        <!-- Properties for goal: reanalyzeSession -->
        <dynaTrace.sessionName>My Stored Session</dynaTrace.sessionName>
        <dynaTrace.reanalyzeSessionTimeout>60000</dynaTrace.reanalyzeSessionTimeout> <!-- timeout to wait till reanalyze session is finished - in ms (default: 60000) -->
        <dynaTrace.reanalyzeSessionPollingInterval>5000</dynaTrace.reanalyzeSessionPollingInterval> <!-- polling interval while waiting for reanalyze to be finished in ms (default:5000) -->
        <dynaTrace.reanalyzeStatusProperty>dynaTrace.status</dynaTrace.reanalyzeStatusProperty> <!-- property that will be set with true when reanalyze was finished within the timeout-->

        <!-- Property for goals: restartCollector, restartServer -->
        <dynaTrace.restart>true</dynaTrace.restart> <!-- true for restart, false for shutdown -->

        <!-- Property for goal: restartCollector -->
        <dynaTrace.collector>dtcollector</dynaTrace.collector> <!-- collector name to restart/shutdown -->

        <!-- This property will be used to store the actual Session Name for e.g.: Start/Stop Recording -->
        <dynaTrace.sessionNameProperty>dynaTrace.sessionName</dynaTrace.sessionNameProperty>

        <!-- Properties for goal: startRecording -->
        <dynaTrace.sessionName>My Stored Session</dynaTrace.sessionName>
        <dynaTrace.sessionDescription>My stored Session Description</dynaTrace.sessionDescription>
        <dynaTrace.recordingOption>all</dynaTrace.recordingOption> <!-- other options: violations|timeseries -->
        <dynaTrace.sessionLocked>false</dynaTrace.sessionLocked>
        <dynaTrace.appendTimestamp>false</dynaTrace.appendTimestamp>

        <!-- Properties for goal: stopRecording -->
        <dynaTrace.doReanalyzeSession>true</dynaTrace.doReanalyzeSession> <!-- true to trigger reanalyze session after stop recording -->
        <dynaTrace.stopDelay>0</dynaTrace.stopDelay> <!-- delay before actually stopping recording (default:0) -->
        <dynaTrace.reanalyzeSessionTimeout>60000</dynaTrace.reanalyzeSessionTimeout> <!-- timeout to wait till reanalyze session is finished - in ms (default: 60000) -->
        <dynaTrace.reanalyzeSessionPollingInterval>5000</dynaTrace.reanalyzeSessionPollingInterval> <!-- polling interval while waiting for reanalyze to be finished in ms (default:5000) -->
        <dynaTrace.reanalyzeStatusProperty>dynaTrace.status</dynaTrace.reanalyzeStatusProperty> <!-- property that will be set with true when reanalyze was finished within the timeout-->

        <!-- Properties for goal: startTest -->
        <!-- we are using properties from (plugin) local-scope, so this is commented out -->
        <!--
        <dynaTrace.versionMajor>1</dynaTrace.versionMajor>
        <dynaTrace.versionMinor>2</dynaTrace.versionMinor>
        <dynaTrace.versionBuild>3</dynaTrace.versionBuild>
        <dynaTrace.versionMilestone>m4</dynaTrace.versionMilestone>
        <dynaTrace.marker>marker</dynaTrace.marker>
        <dynaTrace.testCategory>unit</dynaTrace.testCategory>
        <dynaTrace.platform>Linux</dynaTrace.platform>
        <dynaTrace.ignoreVersionTag>false</dynaTrace.ignoreVersionTag> --> <!-- if true, ignores version from POM and uses version properties above -->
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>1.4.3.RELEASE</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>







            <plugin>
                <groupId>dynaTrace</groupId>
                <artifactId>dtAutomation</artifactId>
                <version>${dynaTrace.version}</version>
                <executions>
                <execution>
                    <id>DT_StartTest_UnitTest</id>
                    <configuration>
                        <!-- the build id (passed from Jenkins) will be re-used by Dynatrace to retrieve the test results -->
                        <versionBuild>${BUILD_ID}</versionBuild>
                        <profileName>junit-example-dt-maven</profileName>
                        <category>unit</category>
                    </configuration>
                    <!-- start this test in the process-test-classes phase which is the one before the tests are executed -->
                    <phase>process-test-classes</phase>
                    <goals>
                        <!-- call the startTest goal of the Dynatrace Maven plugin -->
                        <goal>startTest</goal>
                    </goals>
                </execution>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <includes>
                        <include>**/Unit*.java</include>
                    </includes>
                    <!-- dtTestrunID is passed from the Dynatrace Maven Plug-in -->
                    <!-- dt_agent_path, dt_agent_name and dt_server needs to be configured in your script or passed as environment variable -->
                    <argLine>-agentpath:"${dt_agent_path}"=name=${dt_agent_name},server=${dt_server},optionTestRunIdJava=${dtTestrunID}</argLine>
                </configuration>
            </plugin>







        </plugins>
    </build>
</project>